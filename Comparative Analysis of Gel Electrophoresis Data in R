# R script that provides an innovative approach to DNA Fragment Analysis. It utilizes Analysis of Variance (ANOVA) on DNA fragment size data. 
# By leveraging R's computational and graphical capabilities, 
# the script allows researchers to effectively process, analyze, and visually interpret complex genomic datasets.

# Import necessary libraries
library(dbscan)
library(pheatmap)
library(readr)
library(dplyr)
library(tidyr)
library(stats)
library(ggplot2)
library(corrplot)
library(viridis) # For additional color palettes
library(p.adjust.methods) # For multiple testing correction

# Load reference and sample data
reference_data <- read_csv('/Users/albertmahaffey/Downloads/1515_Reference_gel.csv')
sample_data <- read_csv('/Users/albertmahaffey/Downloads/1515_sample_gel.csv')

# Replace missing values in reference_data and sample_data
reference_data[is.na(reference_data)] <- 0
sample_data[is.na(sample_data)] <- 0

# Add quality score columns for 'Rf', 'Cal.Volume', 'Raw Volume' and 'MW'
reference_data <- reference_data %>% 
  mutate(
    Rf_score = ntile(Rf, 5),
    Cal_Volume_score = ntile(`Cal.Volume`, 5),
    Raw_Volume_score = ntile(`Raw Volume`, 5),
    MW_score = ntile(MW, 5)
  )

sample_data <- sample_data %>% 
  mutate(
    Rf_score = ntile(Rf, 5),
    Cal_Volume_score = ntile(`Cal.Volume`, 5),
    Raw_Volume_score = ntile(`Raw Volume`, 5),
    MW_score = ntile(MW, 5)
  )

# Functions are defined at the start to keep the code clean
# Function to estimate the fragment sizes based on the reference ladder
estimate_fragment_sizes <- function(ladder_sizes, ladder_rf, band_rf) {
  # Fit a linear regression model to estimate the size-position relationship
  fit <- lm(ladder_sizes ~ ladder_rf)
  
  # Predict fragment sizes based on the model
  fragment_sizes <- predict(fit, newdata = data.frame(ladder_rf = band_rf))
  
  return(fragment_sizes)
}

# Function to perform ANOVA and calculate p-value and confidence intervals for a specific sample band
perform_anova <- function(reference_data, sample_data) {
  # Create a data frame for ANOVA
  anova_df <- data.frame(
    FragmentSize = c(reference_data$FragmentSize, sample_data$FragmentSize),
    Group = factor(c(rep('Reference', nrow(reference_data)), rep('Sample', nrow(sample_data))))
  )
  
  # Perform ANOVA
  fit <- aov(FragmentSize ~ Group, data = anova_df)
  
  # Get the ANOVA table
  anova_table <- summary(fit)
  
  # Get the p-value from the ANOVA table
  p_value <- anova_table[[1]]$"Pr(>F)"[1]
  
  # Calculate confidence intervals
  ci <- confint(fit)
  
  # Return the p-value, ANOVA table and confidence intervals
  return(list(p_value = p_value, anova_table = anova_table, ci = ci))
}

# Extract the ladder from reference data
ladder <- reference_data[reference_data$Lane == 1, ]

# Generate fragment size data for each primer set in the reference data
reference_data <- reference_data %>%
  group_by(Lane, Band) %>%
  mutate(FragmentSize = estimate_fragment_sizes(ladder$Cal.Volume, ladder$Rf, Rf))

# Generate fragment size data for each primer set in the sample data
sample_data <- sample_data %>%
  group_by(Lane, Band) %>%
  mutate(FragmentSize = estimate_fragment_sizes(ladder$Cal.Volume, ladder$Rf, Rf))

# Comparison scenarios
comparison_scenarios <- list(
  list(reference = "Ba900 w/ BOX1AR", sample = "Hp13 1017 w/ BOX1AR"),
  list(reference = "Ba900 w/ Eric", sample = "Ba900 572 w/ Eric"),
  list(reference = "Hp13 w/ BOX1AR", sample = "Hp13 1017 w/ BOX1AR"),
  list(reference = "Hp13 w/ Eric", sample = "Hp13 1017 w/ Eric"),
  list(reference = "Ba900 w/ BOX1AR", sample = "Hp13 1017 w/ BOX1AR"),
  list(reference = "Ba900 w/ Eric", sample = "Hp13 1017 w/ Eric"),
  list(reference = "Hp13 w/ BOX1AR", sample = "Ba900 572 w/BOX1AR"),
  list(reference = "Hp13 w/ Eric", sample = "Ba900 572 w/ Eric")

)

p_values <- c()

# Perform ANOVA and calculate p-value and confidence intervals for each comparison scenario
for (scenario in comparison_scenarios) {
  reference <- scenario$reference
  sample <- scenario$sample
  
  reference_data_scenario <- reference_data[reference_data$Sample == reference, ]
  sample_data_scenario <- sample_data[sample_data$Sample == sample, ]
  
  result_scenario <- perform_anova(reference_data_scenario, sample_data_scenario)
  p_value_scenario <- result_scenario$p_value
  anova_table_scenario <- result_scenario$anova_table
  ci_scenario <- result_scenario$ci
  
  # Add the p-value to the list
  p_values <- c(p_values, p_value_scenario)
  
  print(paste("P-value for comparing", reference, "reference to", sample, "sample:", round(p_value_scenario, 4)))
  print(anova_table_scenario)
  print(ci_scenario)
}

# Adjust the p-values for multiple testing using Bonferroni correction
adjusted_p_values <- p.adjust(p_values, method = "bonferroni")
print(paste("Adjusted p-values:", adjusted_p_values))

# Create a data frame for the comparison scenarios and p-values
comparison_data <- data.frame(
  Comparison = unlist(lapply(comparison_scenarios, function(x) paste(x$reference, "vs", x$sample))),
  p_value = adjusted_p_values
)

# Bar plot
bar_plot <- ggplot(comparison_data, aes(x = Comparison, y = p_value)) +
  geom_bar(stat = "identity", fill = "steelblue") +
  geom_hline(yintercept = 0.05, linetype = "dashed", color = "red") +
  labs(title = "Comparison of p-values", x = "Comparison", y = "p-value") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

# Dot plot
dot_plot <- ggplot(comparison_data, aes(x = Comparison, y = p_value)) +
  geom_point(color = "steelblue", size = 3) +
  geom_hline(yintercept = 0.05, linetype = "dashed", color = "red") +
  labs(title = "Comparison of p-values", x = "Comparison", y = "p-value") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

# Display the plots
print(bar_plot)
print(dot_plot)

# Create a summary data frame for visualization
summary_data <- rbind(
  reference_data %>%
    group_by(Sample) %>%
    summarise(MeanFragmentSize = mean(FragmentSize), SD = sd(FragmentSize)),
  sample_data %>%
    group_by(Sample) %>%
    summarise(MeanFragmentSize = mean(FragmentSize), SD = sd(FragmentSize))
)

# Plot the mean fragment size and SD for each sample
ggplot(summary_data, aes(x = Sample, y = MeanFragmentSize, fill = Sample)) +
  geom_bar(stat = "identity", position = "dodge") +
  geom_errorbar(aes(ymin = MeanFragmentSize - SD, ymax = MeanFragmentSize + SD), width = 0.4, position = position_dodge(0.9)) +
  theme_bw() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  labs(x = "Sample", y = "Mean Fragment Size (with SD)", fill = "Sample")

# Adjust the p-values for multiple testing using different methods
methods <- c("bonferroni", "holm", "hochberg", "hommel", "BH", "BY")
adjusted_p_values <- lapply(methods, function(method) p.adjust(p_values, method = method))

# Add method names to the adjusted p-values
names(adjusted_p_values) <- methods

# Create a data frame for the comparison scenarios, p-values and methods
comparison_data <- do.call(rbind, lapply(names(adjusted_p_values), function(method) {
  data.frame(
    Method = method,
    Comparison = unlist(lapply(comparison_scenarios, function(x) paste(x$reference, "vs", x$sample))),
    p_value = adjusted_p_values[[method]]
  )
}))

# Plot
ggplot(comparison_data, aes(x = Comparison, y = p_value, fill = Method)) +
  geom_bar(stat = "identity", position = "dodge") +
  geom_hline(yintercept = 0.05, linetype = "dashed", color = "red") +
  labs(title = "Comparison of p-values using different methods", x = "Comparison", y = "p-value") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  scale_fill_brewer(palette = "Set1")

# Function to calculate the Euclidean distance between two samples
calc_distance <- function(sample1, sample2) {
  sqrt(sum((sample1$FragmentSize - sample2$FragmentSize)^2))
}

# Calculate distances between each pair of samples
samples <- unique(c(unique(reference_data$Sample), unique(sample_data$Sample)))
distances <- matrix(nrow = length(samples), ncol = length(samples))
rownames(distances) <- samples
colnames(distances) <- samples
for (i in 1:length(samples)) {
  for (j in 1:length(samples)) {
    sample1_data <- rbind(
      reference_data[reference_data$Sample == samples[i], ],
      sample_data[sample_data$Sample == samples[i], ]
    )
    sample2_data <- rbind(
      reference_data[reference_data$Sample == samples[j], ],
      sample_data[sample_data$Sample == samples[j], ]
    )
    distances[i, j] <- calc_distance(sample1_data, sample2_data)
  }
}

# Convert the distance matrix to a 'dist' object
distances <- as.dist(distances)

# Create a hierarchical clustering dendrogram
hc <- hclust(distances)
plot(hc, hang = -1, main = "Hierarchical Clustering of Samples", xlab = "Sample", sub = "")

# Scale and center the data
data_for_clustering <- scale(summary_data$MeanFragmentSize)

# k-means clustering
set.seed(123)
kmeans_result <- kmeans(data_for_clustering, centers = 3) # Modify centers as per your data
summary_data$cluster_kmeans <- as.factor(kmeans_result$cluster)

# DBSCAN clustering
dbscan_result <- dbscan(data_for_clustering, eps = 0.5, minPts = 5) # Modify eps and minPts as per your data
summary_data$cluster_dbscan <- as.factor(dbscan_result$cluster)

# Hierarchical clustering
dist_matrix <- dist(data_for_clustering) 
hc_result <- hclust(dist_matrix, method = "average") # Modify the method as per your preference
# Cut the dendrogram at k (e.g. k = 3) to get clusters
summary_data$cluster_hc <- as.factor(cutree(hc_result, k = 3)) # Modify k as per your data

# Visualizing clusters
p1 <- ggplot(summary_data, aes(MeanFragmentSize, SD, color = cluster_kmeans)) +
  geom_point(alpha = 0.6, size = 2.5) +
  labs(title = "k-means Clustering")

p2 <- ggplot(summary_data, aes(MeanFragmentSize, SD, color = cluster_dbscan)) +
  geom_point(alpha = 0.6, size = 2.5) +
  labs(title = "DBSCAN Clustering")

p3 <- ggplot(summary_data, aes(MeanFragmentSize, SD, color = cluster_hc)) +
  geom_point(alpha = 0.6, size = 2.5) +
  labs(title = "Hierarchical Clustering")

# To visualize dendrogram from hierarchical clustering
plot(hc_result, cex = 0.6)
rect.hclust(hc_result, k = 3, border = 2:4) # Modify k as per your data

# To visualize all plots side by side
library(gridExtra)
grid.arrange(p1, p2, p3, nrow = 1)

# Adjust the p-values for multiple testing using the Benjamini-Hochberg procedure
adjusted_p_values_BH <- p.adjust(p_values, method = "BH")

# Add adjusted p-values to the comparison_data dataframe
comparison_data$AdjustedPValue_BH <- adjusted_p_values_BH

print(comparison_data)

# Generate a dendrogram based on the adjusted p-values
dist_adjusted_p_values_BH <- dist(adjusted_p_values_BH)
hc_adjusted_p_values_BH <- hclust(dist_adjusted_p_values_BH)
plot(hc_adjusted_p_values_BH, main = "Dendrogram based on adjusted p-values")

# Scatter plot of raw p-values versus adjusted p-values, colored by comparison
ggplot(comparison_data, aes(x = p_value, y = AdjustedPValue_BH, color = Comparison)) +
  geom_point() +
  labs(title = "Raw P-Value vs Adjusted P-Value", x = "Raw P-Value", y = "Adjusted P-Value (Benjamini-Hochberg)") +
  theme_minimal()

# Boxplot of adjusted p-values by comparison
ggplot(comparison_data, aes(x = Comparison, y = AdjustedPValue_BH, fill = Comparison)) +
  geom_boxplot() +
  labs(title = "Boxplot of Adjusted P-Values by Comparison", x = "Comparison", y = "Adjusted P-Value (Benjamini-Hochberg)") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

# Heatmap of adjusted p-values
adjusted_p_values_BH_matrix <- matrix(adjusted_p_values_BH, nrow = sqrt(length(adjusted_p_values_BH)), ncol = sqrt(length(adjusted_p_values_BH)))
colnames(adjusted_p_values_BH_matrix) <- comparison_data$Comparison[1:sqrt(length(adjusted_p_values_BH))]
rownames(adjusted_p_values_BH_matrix) <- comparison_data$Comparison[1:sqrt(length(adjusted_p_values_BH))]
pheatmap(adjusted_p_values_BH_matrix, main = "Heatmap of Adjusted P-Values")

# Create a data frame for the comparison scenarios and p-values
comparison_data_BH <- data.frame(
  Comparison = unlist(lapply(comparison_scenarios, function(x) paste(x$reference, "vs", x$sample))),
  p_value = adjusted_p_values_BH
)

# Bar plot
bar_plot_BH <- ggplot(comparison_data_BH, aes(x = Comparison, y = p_value)) +
  geom_bar(stat = "identity", fill = "steelblue") +
  geom_hline(yintercept = 0.05, linetype = "dashed", color = "red") +
  labs(title = "Comparison of p-values (Benjamini-Hochberg adjusted)", x = "Comparison", y = "p-value") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

# Dot plot
dot_plot_BH <- ggplot(comparison_data_BH, aes(x = Comparison, y = p_value)) +
  geom_point(color = "steelblue", size = 3) +
  geom_hline(yintercept = 0.05, linetype = "dashed", color = "red") +
  labs(title = "Comparison of p-values (Benjamini-Hochberg adjusted)", x = "Comparison", y = "p-value") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

# Display the plots
print(bar_plot_BH)
print(dot_plot_BH)

# Add adjusted p-values to the summary data
summary_data <- summary_data %>%
  mutate(AdjustedPValue = p.adjust(p_value, method = "BH"))

# Generate a dendrogram based on the hierarchical clustering of the mean fragment sizes
hclust_obj <- hclust(dist(summary_data$MeanFragmentSize))
plot(hclust_obj, main = "Dendrogram of Mean Fragment Sizes")





